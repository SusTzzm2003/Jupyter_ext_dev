{"version":3,"file":"lib_chapyter_js.5c8fb2a5d19693055115.js","mappings":"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","sources":["webpack://jupyterlab_apod/./src/chapyter.ts"],"sourcesContent":["import {\r\n  JupyterFrontEnd,\r\n  JupyterFrontEndPlugin\r\n} from '@jupyterlab/application';\r\nimport {\r\n  INotebookTracker,\r\n  NotebookActions,\r\n  Notebook\r\n} from '@jupyterlab/notebook';\r\nimport { CodeCell, Cell, isCodeCellModel } from '@jupyterlab/cells';\r\n\r\nconst CHAPYTER_CHAT_CELL = 'jp-chapyter-chat';\r\nconst CHAPYTER_CHAT_CELL_EXECUTING = 'jp-chapyter-chat-executing';\r\nconst CHAPYTER_ASSISTANCE_CELL = 'jp-chapyter-assistance';\r\n\r\ntype ChapyterCellMetadata = {\r\n  linkedCellId?: string;\r\n  cellType: 'generated' | 'original';\r\n};\r\n\r\n/**\r\n * Check if the cell is not generated by Chapyter\r\n */\r\nfunction isCellNotGenerated(cell: Cell): boolean {\r\n  if (isCodeCellModel(cell.model)) {\r\n    let metadata =\r\n      (cell.model.getMetadata('ChapyterCell') as ChapyterCellMetadata) || null;\r\n    if (metadata && metadata.cellType === 'generated') {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Iterate through the notebook and find the cell with the given ID\r\n */\r\nfunction findCellById(notebook: Notebook, id: string): Cell | null {\r\n  for (let i = 0; i < notebook.widgets.length; i++) {\r\n    let cell = notebook.widgets[i];\r\n    if (cell.model.id === id) {\r\n      return cell;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * Iterate through the notebook and find the code cell that starts with the\r\n * given template string. In our case, the template string is simply a manual\r\n * template that's inserted by Chapyter.\r\n */\r\nfunction findCellByTemplateString(\r\n  notebook: Notebook,\r\n  executionId: string | number | null\r\n): CodeCell | null {\r\n  if (executionId) {\r\n    const searchTempalte = `# Assistant Code for Cell [${executionId}]:`;\r\n\r\n    for (let i = 0; i < notebook.widgets.length; i++) {\r\n      let cell = notebook.widgets[i];\r\n      if (cell.model.type === 'code') {\r\n        let codeCell = cell as CodeCell;\r\n        let codeCellText = codeCell.model.sharedModel.getSource();\r\n        if (codeCellText.split('\\n')[0].startsWith(searchTempalte)) {\r\n          return cell as CodeCell;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * Find the index of the cell with the given ID\r\n */\r\nfunction findCellIndexById(notebook: Notebook, id: string): number {\r\n  for (let i = 0; i < notebook.widgets.length; i++) {\r\n    let cell = notebook.widgets[i];\r\n    if (cell.model.id === id) {\r\n      return i;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\n/**\r\n * Select the target cell based on its id by moving the cursor\r\n * (using NotebookActions.selectAbove or NotebookActions.selectAbove).\r\n */\r\nfunction selectCellById(notebook: Notebook, id: string): void {\r\n  let activeCellIndex = notebook.activeCellIndex;\r\n  let targetCellIndex = findCellIndexById(notebook, id);\r\n  if (targetCellIndex !== -1) {\r\n    if (activeCellIndex !== targetCellIndex) {\r\n      if (activeCellIndex < targetCellIndex) {\r\n        for (let i = activeCellIndex; i < targetCellIndex; i++) {\r\n          if (!notebook.widgets[i].inputHidden) {\r\n            NotebookActions.selectBelow(notebook);\r\n          }\r\n        }\r\n      } else {\r\n        for (let i = activeCellIndex; i > targetCellIndex; i--) {\r\n          if (!notebook.widgets[i].inputHidden) {\r\n            NotebookActions.selectAbove(notebook);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Check if the code cell is a Chapyter magic cell\r\n * i.e., the cell starts with %chat or %%chat\r\n */\r\nfunction isCellChapyterMagicCell(\r\n  cell: CodeCell,\r\n  strict: boolean = false\r\n): boolean {\r\n  let codeCellText = cell.model.sharedModel.getSource();\r\n  if (codeCellText.startsWith('%chat') || codeCellText.startsWith('%%chat')) {\r\n    if (!codeCellText.startsWith('%%chatonly') || !strict) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Check if a cell is a Chapyter magic cell in safe mode\r\n * indicated by the -s or --safe flag\r\n */\r\nfunction isCellChapyterMagicCellSafeMode(cell: CodeCell): boolean {\r\n  let codeCellText = cell.model.sharedModel.getSource();\r\n  let firstLine = codeCellText.split('\\n')[0];\r\n  return firstLine.includes('-s') || firstLine.includes('--safe');\r\n}\r\n\r\n/**\r\n * Delete the cell from the notebook\r\n */\r\nfunction deleteCell(notebook: Notebook, cell: Cell): void {\r\n  const model = notebook.model!;\r\n  const sharedModel = model.sharedModel;\r\n  const toDelete: number[] = [];\r\n\r\n  notebook.widgets.forEach((child, index) => {\r\n    if (child === cell) {\r\n      const deletable = child.model.getMetadata('deletable') !== false;\r\n\r\n      if (deletable) {\r\n        toDelete.push(index);\r\n        notebook.model?.deletedCells.push(child.model.id);\r\n      }\r\n    }\r\n  });\r\n\r\n  if (toDelete.length > 0) {\r\n    // Delete the cells as one undo event.\r\n    sharedModel.transact(() => {\r\n      // Delete cells in reverse order to maintain the correct indices.\r\n      toDelete.reverse().forEach(index => {\r\n        sharedModel.deleteCell(index);\r\n      });\r\n    });\r\n    // Select the *first* interior cell not deleted or the cell\r\n    // *after* the last selected cell.\r\n    // Note: The activeCellIndex is clamped to the available cells,\r\n    // so if the last cell is deleted the previous cell will be activated.\r\n    // The *first* index is the index of the last cell in the initial\r\n    // toDelete list due to the `reverse` operation above.\r\n    notebook.activeCellIndex = toDelete[0] - toDelete.length + 1;\r\n  }\r\n\r\n  // Deselect any remaining, undeletable cells. Do this even if we don't\r\n  // delete anything so that users are aware *something* happened.\r\n  notebook.deselectAll();\r\n}\r\n\r\n/**\r\n * Initialization data for the @shannon-shen/chapyter extension.\r\n */\r\nconst plugin: JupyterFrontEndPlugin<void> = {\r\n  id: '@shannon-shen/chapyter:plugin',\r\n  description: 'A Natural Language-Based Python Program Interpreter',\r\n  autoStart: true,\r\n  requires: [INotebookTracker],\r\n  // optional: [ISettingRegistry],\r\n  activate: (app: JupyterFrontEnd, tracker: INotebookTracker) => {\r\n    NotebookActions.executed.connect((sender, args) => {\r\n      if (args.success) {\r\n        // It must be true that the cell is a code cell (otherwise it would not have been executed)\r\n        let chatCell = args.cell as CodeCell;\r\n\r\n        // We only want to automatically generate a new cell if the code cell starts with a magic command (e.g. %chat)\r\n        if (\r\n          isCellChapyterMagicCell(chatCell, true) &&\r\n          isCellNotGenerated(chatCell)\r\n        ) {\r\n          // this is the original code cell that was executed\r\n          if (chatCell.model.getMetadata('ChapyterCell') === undefined) {\r\n            chatCell.model.setMetadata('ChapyterCell', {\r\n              cellType: 'original'\r\n            });\r\n          }\r\n          let inSafeMode = isCellChapyterMagicCellSafeMode(chatCell);\r\n\r\n          // because it is successfully executed\r\n          let notebook = tracker.currentWidget;\r\n          if (notebook) {\r\n            let assistanceCell = findCellByTemplateString(\r\n              notebook.content,\r\n              chatCell.model.executionCount\r\n            );\r\n\r\n            if (assistanceCell) {\r\n              assistanceCell.model.setMetadata('ChapyterCell', {\r\n                cellType: 'generated',\r\n                linkedCellId: chatCell.model.id // the original cell ID\r\n              });\r\n              \r\n              console.log(inSafeMode)\r\n              if (!inSafeMode) {\r\n                selectCellById(notebook.content, assistanceCell.model.id);\r\n                NotebookActions.run(notebook.content, notebook.sessionContext);\r\n                assistanceCell.inputHidden = true;\r\n              }\r\n\r\n              // The removal of existing linked cells is handled in the executionScheduled event\r\n\r\n              /**\r\n               * We want to run the next check for avoiding duplicate cells.\r\n               * Imagine when we are redistributing the notebook: we have already run the\r\n               * chapter cell with the magic command, and the jupyter notebook generates\r\n               * a new cell below the executed cell. Then another person opens the notebook\r\n               * and executes the same chapyter cell. We want to delete the original generated\r\n               * cell and only keep the newly generated cell.\r\n               *\r\n               * The logic is important: if it's on the same machine, then the caching mechanism\r\n               * in guidance will produce us the same code and the user won't feel any difference.\r\n               * However if it's on a different machine, then the generated code will become\r\n               * different and the user will see a different result.\r\n               *\r\n               * We also need to execute this check after the previous cell is executed. Consider\r\n               * the corner case when the (previous) generated cell is the last cell inside a juptyer\r\n               * notebook. If we execute the check before the previous cell is executed, then jupyter\r\n               * will move up (instead of moving down) the active cell and it will confuse the logic\r\n               * for executing the next cell.\r\n               */\r\n\r\n              selectCellById(notebook.content, assistanceCell.model.id);\r\n              if (!inSafeMode) {\r\n                NotebookActions.selectBelow(notebook.content);\r\n              }\r\n\r\n              // set the proper linked cell ID\r\n              chatCell.model.setMetadata('ChapyterCell', {\r\n                cellType: 'original',\r\n                linkedCellId: assistanceCell.model.id\r\n              });\r\n\r\n              chatCell.addClass(CHAPYTER_CHAT_CELL);\r\n              chatCell.removeClass(CHAPYTER_CHAT_CELL_EXECUTING);\r\n              assistanceCell.addClass(CHAPYTER_ASSISTANCE_CELL);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    NotebookActions.executionScheduled.connect((sender, args) => {\r\n      // It must be true that the cell is a code cell (otherwise it would not have been executed)\r\n      let chatCell = args.cell as CodeCell;\r\n\r\n      // We want to automatically remove existing generated cells if we are running the chapyter cell\r\n      if (isCellChapyterMagicCell(chatCell) && isCellNotGenerated(chatCell)) {\r\n        chatCell.toggleClass(CHAPYTER_CHAT_CELL_EXECUTING);\r\n        let linkedCellId =\r\n          chatCell.model.getMetadata('ChapyterCell')?.linkedCellId;\r\n\r\n        let notebook = tracker.currentWidget;\r\n        if (notebook) {\r\n          if (linkedCellId) {\r\n            let linkedCell = findCellById(notebook.content, linkedCellId);\r\n            if (linkedCell) {\r\n              deleteCell(notebook.content, linkedCell);\r\n\r\n              /**\r\n               * Make sure we select the right cell after the deletion:\r\n               * Because we will use the selectBelow function when executing the generated\r\n               * code cell, we want to make sure we are selecting the current codeCell in this\r\n               * executionScheduled event.\r\n               */\r\n              selectCellById(notebook.content, chatCell.model.id);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    tracker.widgetAdded.connect((sender, notebookPanel) => {\r\n      notebookPanel.context.ready.then(() => {\r\n        notebookPanel.content.widgets.forEach(cell => {\r\n          switch (cell.model.type) {\r\n            case 'code': {\r\n              /**\r\n               * The logic: \r\n               * When we load a notebook, we want to check if a code cell is a chapyter cell.\r\n               * 1. if it is generated, then we want to add the class CHAPYTER_ASSISTANCE_CELL\r\n               * 2. if it is original, \r\n               *  a. if the linked cell exists, then we want to add the class CHAPYTER_CHAT_CELL\r\n               *  b. if the linked cell does not exist, then we want to add the class CHAPYTER_CHAT_CELL_EXECUTING\r\n               */\r\n              if (cell.model.getMetadata('ChapyterCell')) {\r\n                if (cell.model.getMetadata('ChapyterCell')?.cellType === 'original') {\r\n                  if (findCellById(notebookPanel.content, cell.model.getMetadata('ChapyterCell')?.linkedCellId)) {\r\n                    cell.addClass(CHAPYTER_CHAT_CELL);\r\n                  } else {\r\n                    cell.addClass(CHAPYTER_CHAT_CELL_EXECUTING);\r\n                  }\r\n                } else if (cell.model.getMetadata('ChapyterCell')?.cellType === 'generated') {\r\n                  cell.addClass(CHAPYTER_ASSISTANCE_CELL);\r\n                } else {\r\n                  console.log(cell.model.getMetadata('ChapyterCell'));\r\n                }\r\n              }\r\n            }\r\n          }\r\n        })\r\n      })\r\n    });\r\n  }\r\n};\r\n\r\nexport default plugin;\r\n"],"names":[],"sourceRoot":""}